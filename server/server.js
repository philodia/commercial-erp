// Importer l'application Express configurÃ©e depuis app.js
const app = require('./app');

// Importer la fonction de connexion Ã  la base de donnÃ©es
const connectDB = require('./config/database');

// --- GESTION DES ERREURS NON CAPTURÃ‰ES ---
// Permet de capturer les erreurs de programmation synchrones non gÃ©rÃ©es.
// Doit Ãªtre dÃ©fini avant tout autre code pour Ãªtre efficace.
process.on('uncaughtException', (err) => {
  console.log('UNCAUGHT EXCEPTION! ðŸ’¥ Shutting down...');
  console.error(err.name, err.message);
  process.exit(1);
});

// --- CONNEXION Ã€ LA BASE DE DONNÃ‰ES ---
// Lancer la connexion Ã  MongoDB. Le serveur ne dÃ©marrera pas si la connexion Ã©choue,
// car la fonction connectDB contient un process.exit(1) en cas d'erreur.
connectDB();

// --- DÃ‰MARRAGE DU SERVEUR ---

// DÃ©finir le port d'Ã©coute. Utilise la variable d'environnement PORT si elle existe,
// sinon, utilise le port 5000 par dÃ©faut.
const PORT = process.env.PORT || 5000;

// DÃ©marrer le serveur et Ã©couter sur le port dÃ©fini.
// app.listen() retourne une instance du serveur que nous stockons dans une variable.
const server = app.listen(PORT, () => {
  console.log(`Server is running in ${process.env.NODE_ENV} mode on port ${PORT}`);
});


// --- GESTION DES ERREURS ASYNCHRONES GLOBALES ---
// Permet de capturer les rejets de promesses qui n'ont pas Ã©tÃ© attrapÃ©s avec un .catch()
// Ex: une erreur dans une base de donnÃ©es distante sans gestion d'erreur.
process.on('unhandledRejection', (err) => {
  console.log('UNHANDLED REJECTION! ðŸ’¥ Shutting down...');
  console.error(err.name, err.message);
  
  // Fermer le serveur de maniÃ¨re "gracieuse" (gracefully) :
  // 1. On arrÃªte d'accepter de nouvelles requÃªtes.
  // 2. On attend que les requÃªtes en cours se terminent.
  // 3. Ensuite, on arrÃªte le processus de l'application.
  server.close(() => {
    process.exit(1); // 1 indique une sortie avec erreur
  });
});